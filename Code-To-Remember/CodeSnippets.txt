============ Arrays =============

1. String length - str.length()
2. Array length - arr.length
3. List sort - Collections.sort(list);
4. Array sort - Arrays.sort(nums);
    Arrays.sort(nums); //O(NlogN) time and in-place sort O(1)



============ Linked Lists =============
1. In linkedlists, if you want to start a new list and which node is next, it is a good idea to start with
    preHead = new ListNode(-1), and start adding nodes to it as we process further, by
    preHead.next = newProcessedNode;
    And finally return preHead.next

2. In LinkedList, always make sure curr is not null, then only declare nxt = curr.next;

       In reversing linkedlist:
       // ListNode nxt = curr.next; - do not delare here because you do not know if curr is null or not. Declare in the while loop below.

               /* The plan is to take curr.next and point to prev, while storing
               original curr.next into nxt*/

               while(curr!=null){
                   ListNode nxt = curr.next;
                   curr.next = prev;
                   prev = curr;
                   curr = nxt;
               }


============ Hash Map =============

1.  Example: HashMap<Integer, Character> map = new HashMap<>();
    map.put(10, 'A');

    Example: HashMap<Character, Character> map = new HashMap<>();
        map.put('(', ')'); - in valid paranthesis

    map.get(ch) // map.get(key)

============ Stacks =============
1. stack.push(<ele>)
    ele = stack.pop()
    boolean isEmpty = stack.isEmpty()

============ General =============

1. To find a minimum, initiate => int minSoFar = Integer.MAX_VALUE;
    then compare if(minSoFar<nums), then minSoFar=nums
    Similarly, int maxSoFar = Integer.MIN_VALUE;



